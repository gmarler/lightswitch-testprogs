<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="2017"><g><title>&lt;unknown address not found in symbolization source&gt; (6 samples, 0.30%)</title><rect x="0.8428%" y="197" width="0.2975%" height="15" fill="rgb(227,0,7)" fg:x="17" fg:w="6"/><text x="1.0928%" y="207.50"></text></g><g><title>_gfortran_st_write (2 samples, 0.10%)</title><rect x="1.1403%" y="197" width="0.0992%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="2"/><text x="1.3903%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="1.1899%" y="181" width="0.0496%" height="15" fill="rgb(221,193,54)" fg:x="24" fg:w="1"/><text x="1.4399%" y="191.50"></text></g><g><title>_gfortran_st_write_done (4 samples, 0.20%)</title><rect x="1.2395%" y="197" width="0.1983%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="4"/><text x="1.4895%" y="207.50"></text></g><g><title>_gfortran_transfer_character (1 samples, 0.05%)</title><rect x="1.4378%" y="197" width="0.0496%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="1"/><text x="1.6878%" y="207.50"></text></g><g><title>_gfortran_transfer_integer (1 samples, 0.05%)</title><rect x="1.4874%" y="197" width="0.0496%" height="15" fill="rgb(232,128,0)" fg:x="30" fg:w="1"/><text x="1.7374%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="2.9747%" y="181" width="0.0992%" height="15" fill="rgb(207,160,47)" fg:x="60" fg:w="2"/><text x="3.2247%" y="191.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (4 samples, 0.20%)</title><rect x="4.2638%" y="165" width="0.1983%" height="15" fill="rgb(228,23,34)" fg:x="86" fg:w="4"/><text x="4.5138%" y="175.50"></text></g><g><title>__memcpy_evex_unaligned_erms (8 samples, 0.40%)</title><rect x="4.4621%" y="165" width="0.3966%" height="15" fill="rgb(218,30,26)" fg:x="90" fg:w="8"/><text x="4.7121%" y="175.50"></text></g><g><title>_gfortrani_fbuf_flush_list (5 samples, 0.25%)</title><rect x="4.8587%" y="165" width="0.2479%" height="15" fill="rgb(220,122,19)" fg:x="98" fg:w="5"/><text x="5.1087%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="6.2965%" y="149" width="0.0496%" height="15" fill="rgb(250,228,42)" fg:x="127" fg:w="1"/><text x="6.5465%" y="159.50"></text></g><g><title>_gfortrani_write_block (42 samples, 2.08%)</title><rect x="5.1066%" y="165" width="2.0823%" height="15" fill="rgb(240,193,28)" fg:x="103" fg:w="42"/><text x="5.3566%" y="175.50">_..</text></g><g><title>_gfortrani_fbuf_alloc (17 samples, 0.84%)</title><rect x="6.3461%" y="149" width="0.8428%" height="15" fill="rgb(216,20,37)" fg:x="128" fg:w="17"/><text x="6.5961%" y="159.50"></text></g><g><title>_init (2 samples, 0.10%)</title><rect x="7.1889%" y="165" width="0.0992%" height="15" fill="rgb(206,188,39)" fg:x="145" fg:w="2"/><text x="7.4389%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="7.7343%" y="149" width="0.0496%" height="15" fill="rgb(217,207,13)" fg:x="156" fg:w="1"/><text x="7.9843%" y="159.50"></text></g><g><title>write_character (28 samples, 1.39%)</title><rect x="7.2881%" y="165" width="1.3882%" height="15" fill="rgb(231,73,38)" fg:x="147" fg:w="28"/><text x="7.5381%" y="175.50"></text></g><g><title>_gfortrani_write_block (18 samples, 0.89%)</title><rect x="7.7838%" y="149" width="0.8924%" height="15" fill="rgb(225,20,46)" fg:x="157" fg:w="18"/><text x="8.0338%" y="159.50"></text></g><g><title>_gfortrani_fbuf_alloc (5 samples, 0.25%)</title><rect x="8.4284%" y="133" width="0.2479%" height="15" fill="rgb(210,31,41)" fg:x="170" fg:w="5"/><text x="8.6784%" y="143.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (4 samples, 0.20%)</title><rect x="10.0645%" y="149" width="0.1983%" height="15" fill="rgb(221,200,47)" fg:x="203" fg:w="4"/><text x="10.3145%" y="159.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.05%)</title><rect x="10.2628%" y="149" width="0.0496%" height="15" fill="rgb(226,26,5)" fg:x="207" fg:w="1"/><text x="10.5128%" y="159.50"></text></g><g><title>__memset_evex_unaligned_erms (6 samples, 0.30%)</title><rect x="10.3123%" y="149" width="0.2975%" height="15" fill="rgb(249,33,26)" fg:x="208" fg:w="6"/><text x="10.5623%" y="159.50"></text></g><g><title>__strlen_evex (18 samples, 0.89%)</title><rect x="10.6098%" y="149" width="0.8924%" height="15" fill="rgb(235,183,28)" fg:x="214" fg:w="18"/><text x="10.8598%" y="159.50"></text></g><g><title>_gfortrani_gfc_itoa (58 samples, 2.88%)</title><rect x="11.5022%" y="149" width="2.8756%" height="15" fill="rgb(221,5,38)" fg:x="232" fg:w="58"/><text x="11.7522%" y="159.50">_g..</text></g><g><title>_gfortrani_write_block (12 samples, 0.59%)</title><rect x="14.3778%" y="149" width="0.5949%" height="15" fill="rgb(247,18,42)" fg:x="290" fg:w="12"/><text x="14.6278%" y="159.50"></text></g><g><title>_gfortrani_fbuf_alloc (5 samples, 0.25%)</title><rect x="14.7248%" y="133" width="0.2479%" height="15" fill="rgb(241,131,45)" fg:x="297" fg:w="5"/><text x="14.9748%" y="143.50"></text></g><g><title>_init (4 samples, 0.20%)</title><rect x="14.9727%" y="149" width="0.1983%" height="15" fill="rgb(249,31,29)" fg:x="302" fg:w="4"/><text x="15.2227%" y="159.50"></text></g><g><title>_gfortrani_list_formatted_write (278 samples, 13.78%)</title><rect x="1.5369%" y="197" width="13.7828%" height="15" fill="rgb(225,111,53)" fg:x="31" fg:w="278"/><text x="1.7869%" y="207.50">_gfortrani_list_forma..</text></g><g><title>list_formatted_write_scalar (247 samples, 12.25%)</title><rect x="3.0739%" y="181" width="12.2459%" height="15" fill="rgb(238,160,17)" fg:x="62" fg:w="247"/><text x="3.3239%" y="191.50">list_formatted_wri..</text></g><g><title>write_decimal.constprop.0 (134 samples, 6.64%)</title><rect x="8.6763%" y="165" width="6.6435%" height="15" fill="rgb(214,148,48)" fg:x="175" fg:w="134"/><text x="8.9263%" y="175.50">write_dec..</text></g><g><title>extract_int (3 samples, 0.15%)</title><rect x="15.1710%" y="149" width="0.1487%" height="15" fill="rgb(232,36,49)" fg:x="306" fg:w="3"/><text x="15.4210%" y="159.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (5 samples, 0.25%)</title><rect x="15.5181%" y="181" width="0.2479%" height="15" fill="rgb(209,103,24)" fg:x="313" fg:w="5"/><text x="15.7681%" y="191.50"></text></g><g><title>___pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="15.7660%" y="181" width="0.0496%" height="15" fill="rgb(229,88,8)" fg:x="318" fg:w="1"/><text x="16.0160%" y="191.50"></text></g><g><title>_gfortrani_free_ionml (2 samples, 0.10%)</title><rect x="15.8156%" y="181" width="0.0992%" height="15" fill="rgb(213,181,19)" fg:x="319" fg:w="2"/><text x="16.0656%" y="191.50"></text></g><g><title>_init (1 samples, 0.05%)</title><rect x="15.9147%" y="181" width="0.0496%" height="15" fill="rgb(254,191,54)" fg:x="321" fg:w="1"/><text x="16.1647%" y="191.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (4 samples, 0.20%)</title><rect x="17.6004%" y="165" width="0.1983%" height="15" fill="rgb(241,83,37)" fg:x="355" fg:w="4"/><text x="17.8504%" y="175.50"></text></g><g><title>__GI___uselocale (8 samples, 0.40%)</title><rect x="17.7987%" y="165" width="0.3966%" height="15" fill="rgb(233,36,39)" fg:x="359" fg:w="8"/><text x="18.0487%" y="175.50"></text></g><g><title>_gfortrani_fbuf_seek (6 samples, 0.30%)</title><rect x="18.1953%" y="165" width="0.2975%" height="15" fill="rgb(226,3,54)" fg:x="367" fg:w="6"/><text x="18.4453%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="19.7819%" y="149" width="0.0992%" height="15" fill="rgb(245,192,40)" fg:x="399" fg:w="2"/><text x="20.0319%" y="159.50"></text></g><g><title>_gfortrani_fbuf_alloc (10 samples, 0.50%)</title><rect x="19.8810%" y="149" width="0.4958%" height="15" fill="rgb(238,167,29)" fg:x="401" fg:w="10"/><text x="20.1310%" y="159.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (3 samples, 0.15%)</title><rect x="20.9717%" y="133" width="0.1487%" height="15" fill="rgb(232,182,51)" fg:x="423" fg:w="3"/><text x="21.2217%" y="143.50"></text></g><g><title>kernel: __x86_indirect_thunk_rax (2 samples, 0.10%)</title><rect x="25.4834%" y="101" width="0.0992%" height="15" fill="rgb(231,60,39)" fg:x="514" fg:w="2"/><text x="25.7334%" y="111.50"></text></g><g><title>kernel: __x86_return_thunk (7 samples, 0.35%)</title><rect x="25.5825%" y="101" width="0.3471%" height="15" fill="rgb(208,69,12)" fg:x="516" fg:w="7"/><text x="25.8325%" y="111.50"></text></g><g><title>kernel: __audit_syscall_entry (14 samples, 0.69%)</title><rect x="31.6807%" y="53" width="0.6941%" height="15" fill="rgb(235,93,37)" fg:x="639" fg:w="14"/><text x="31.9307%" y="63.50"></text></g><g><title>kernel: __audit_syscall_exit (13 samples, 0.64%)</title><rect x="32.3748%" y="53" width="0.6445%" height="15" fill="rgb(213,116,39)" fg:x="653" fg:w="13"/><text x="32.6248%" y="63.50"></text></g><g><title>kernel: __tdx_hypercall (55 samples, 2.73%)</title><rect x="30.6396%" y="69" width="2.7268%" height="15" fill="rgb(222,207,29)" fg:x="618" fg:w="55"/><text x="30.8896%" y="79.50">ke..</text></g><g><title>kernel: ktime_get_coarse_real_ts64 (7 samples, 0.35%)</title><rect x="33.0193%" y="53" width="0.3471%" height="15" fill="rgb(206,96,30)" fg:x="666" fg:w="7"/><text x="33.2693%" y="63.50"></text></g><g><title>kernel: __x64_sys_write (3 samples, 0.15%)</title><rect x="33.3664%" y="69" width="0.1487%" height="15" fill="rgb(218,138,4)" fg:x="673" fg:w="3"/><text x="33.6164%" y="79.50"></text></g><g><title>kernel: __fdget_pos (16 samples, 0.79%)</title><rect x="34.1596%" y="53" width="0.7933%" height="15" fill="rgb(250,191,14)" fg:x="689" fg:w="16"/><text x="34.4096%" y="63.50"></text></g><g><title>kernel: iget_failed (15 samples, 0.74%)</title><rect x="34.2092%" y="37" width="0.7437%" height="15" fill="rgb(239,60,40)" fg:x="690" fg:w="15"/><text x="34.4592%" y="47.50"></text></g><g><title>kernel: __fsnotify_parent (14 samples, 0.69%)</title><rect x="35.7957%" y="37" width="0.6941%" height="15" fill="rgb(206,27,48)" fg:x="722" fg:w="14"/><text x="36.0457%" y="47.50"></text></g><g><title>kernel: __vfs_write (4 samples, 0.20%)</title><rect x="36.4898%" y="37" width="0.1983%" height="15" fill="rgb(225,35,8)" fg:x="736" fg:w="4"/><text x="36.7398%" y="47.50"></text></g><g><title>kernel: fsnotify (25 samples, 1.24%)</title><rect x="36.6882%" y="37" width="1.2395%" height="15" fill="rgb(250,213,24)" fg:x="740" fg:w="25"/><text x="36.9382%" y="47.50"></text></g><g><title>kernel: rw_verify_area (5 samples, 0.25%)</title><rect x="37.9276%" y="37" width="0.2479%" height="15" fill="rgb(247,123,22)" fg:x="765" fg:w="5"/><text x="38.1776%" y="47.50"></text></g><g><title>__GI___write (343 samples, 17.01%)</title><rect x="21.4675%" y="117" width="17.0055%" height="15" fill="rgb(231,138,38)" fg:x="433" fg:w="343"/><text x="21.7175%" y="127.50">__GI___write</text></g><g><title>kernel: entry_SYSCALL_64_after_hwframe (253 samples, 12.54%)</title><rect x="25.9296%" y="101" width="12.5434%" height="15" fill="rgb(231,145,46)" fg:x="523" fg:w="253"/><text x="26.1796%" y="111.50">kernel: entry_SYSCA..</text></g><g><title>kernel: do_syscall_64 (253 samples, 12.54%)</title><rect x="25.9296%" y="85" width="12.5434%" height="15" fill="rgb(251,118,11)" fg:x="523" fg:w="253"/><text x="26.1796%" y="95.50">kernel: do_syscall_..</text></g><g><title>kernel: ksys_write (100 samples, 4.96%)</title><rect x="33.5151%" y="69" width="4.9579%" height="15" fill="rgb(217,147,25)" fg:x="676" fg:w="100"/><text x="33.7651%" y="79.50">kernel..</text></g><g><title>kernel: vfs_write (71 samples, 3.52%)</title><rect x="34.9529%" y="53" width="3.5201%" height="15" fill="rgb(247,81,37)" fg:x="705" fg:w="71"/><text x="35.2029%" y="63.50">ker..</text></g><g><title>kernel: security_file_permission (6 samples, 0.30%)</title><rect x="38.1755%" y="37" width="0.2975%" height="15" fill="rgb(209,12,38)" fg:x="770" fg:w="6"/><text x="38.4255%" y="47.50"></text></g><g><title>_gfortrani_fbuf_flush (367 samples, 18.20%)</title><rect x="20.3768%" y="149" width="18.1953%" height="15" fill="rgb(227,1,9)" fg:x="411" fg:w="367"/><text x="20.6268%" y="159.50">_gfortrani_fbuf_flush</text></g><g><title>raw_write (352 samples, 17.45%)</title><rect x="21.1205%" y="133" width="17.4517%" height="15" fill="rgb(248,47,43)" fg:x="426" fg:w="352"/><text x="21.3705%" y="143.50">raw_write</text></g><g><title>_init (2 samples, 0.10%)</title><rect x="38.4730%" y="117" width="0.0992%" height="15" fill="rgb(221,10,30)" fg:x="776" fg:w="2"/><text x="38.7230%" y="127.50"></text></g><g><title>_gfortrani_next_record (412 samples, 20.43%)</title><rect x="18.4928%" y="165" width="20.4264%" height="15" fill="rgb(210,229,1)" fg:x="373" fg:w="412"/><text x="18.7428%" y="175.50">_gfortrani_next_record</text></g><g><title>_gfortrani_fbuf_seek (7 samples, 0.35%)</title><rect x="38.5721%" y="149" width="0.3471%" height="15" fill="rgb(222,148,37)" fg:x="778" fg:w="7"/><text x="38.8221%" y="159.50"></text></g><g><title>_gfortrani_st_write_done_worker (477 samples, 23.65%)</title><rect x="15.3198%" y="197" width="23.6490%" height="15" fill="rgb(234,67,33)" fg:x="309" fg:w="477"/><text x="15.5698%" y="207.50">_gfortrani_st_write_done_worker</text></g><g><title>finalize_transfer (464 samples, 23.00%)</title><rect x="15.9643%" y="181" width="23.0045%" height="15" fill="rgb(247,98,35)" fg:x="322" fg:w="464"/><text x="16.2143%" y="191.50">finalize_transfer</text></g><g><title>raw_markeor (1 samples, 0.05%)</title><rect x="38.9192%" y="165" width="0.0496%" height="15" fill="rgb(247,138,52)" fg:x="785" fg:w="1"/><text x="39.1692%" y="175.50"></text></g><g><title>_init (7 samples, 0.35%)</title><rect x="38.9688%" y="197" width="0.3471%" height="15" fill="rgb(213,79,30)" fg:x="786" fg:w="7"/><text x="39.2188%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="43.8770%" y="165" width="0.0992%" height="15" fill="rgb(246,177,23)" fg:x="885" fg:w="2"/><text x="44.1270%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="45.2157%" y="149" width="0.0496%" height="15" fill="rgb(230,62,27)" fg:x="912" fg:w="1"/><text x="45.4657%" y="159.50"></text></g><g><title>__GI__IO_fflush (29 samples, 1.44%)</title><rect x="43.9762%" y="165" width="1.4378%" height="15" fill="rgb(216,154,8)" fg:x="887" fg:w="29"/><text x="44.2262%" y="175.50"></text></g><g><title>__GI__IO_file_sync (3 samples, 0.15%)</title><rect x="45.2652%" y="149" width="0.1487%" height="15" fill="rgb(244,35,45)" fg:x="913" fg:w="3"/><text x="45.5152%" y="159.50"></text></g><g><title>__GI___uselocale (10 samples, 0.50%)</title><rect x="45.4140%" y="165" width="0.4958%" height="15" fill="rgb(251,115,12)" fg:x="916" fg:w="10"/><text x="45.6640%" y="175.50"></text></g><g><title>_gfortrani_flush_if_preconnected (2 samples, 0.10%)</title><rect x="45.9098%" y="165" width="0.0992%" height="15" fill="rgb(240,54,50)" fg:x="926" fg:w="2"/><text x="46.1598%" y="175.50"></text></g><g><title>_init (3 samples, 0.15%)</title><rect x="46.0089%" y="165" width="0.1487%" height="15" fill="rgb(233,84,52)" fg:x="928" fg:w="3"/><text x="46.2589%" y="175.50"></text></g><g><title>_gfortrani_data_transfer_init_worker (65 samples, 3.22%)</title><rect x="43.2325%" y="181" width="3.2226%" height="15" fill="rgb(207,117,47)" fg:x="872" fg:w="65"/><text x="43.4825%" y="191.50">_gf..</text></g><g><title>pre_position (6 samples, 0.30%)</title><rect x="46.1577%" y="165" width="0.2975%" height="15" fill="rgb(249,43,39)" fg:x="931" fg:w="6"/><text x="46.4077%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="47.6946%" y="165" width="0.0992%" height="15" fill="rgb(209,38,44)" fg:x="962" fg:w="2"/><text x="47.9446%" y="175.50"></text></g><g><title>__GI___pthread_mutex_trylock (33 samples, 1.64%)</title><rect x="47.7938%" y="165" width="1.6361%" height="15" fill="rgb(236,212,23)" fg:x="964" fg:w="33"/><text x="48.0438%" y="175.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (5 samples, 0.25%)</title><rect x="49.4298%" y="165" width="0.2479%" height="15" fill="rgb(242,79,21)" fg:x="997" fg:w="5"/><text x="49.6798%" y="175.50"></text></g><g><title>a1_ (1,012 samples, 50.17%)</title><rect x="0.0000%" y="261" width="50.1735%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="1012"/><text x="0.2500%" y="271.50">a1_</text></g><g><title>b1_ (1,012 samples, 50.17%)</title><rect x="0.0000%" y="245" width="50.1735%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="1012"/><text x="0.2500%" y="255.50">b1_</text></g><g><title>c1_ (1,012 samples, 50.17%)</title><rect x="0.0000%" y="229" width="50.1735%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="1012"/><text x="0.2500%" y="239.50">c1_</text></g><g><title>top1_ (1,012 samples, 50.17%)</title><rect x="0.0000%" y="213" width="50.1735%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="1012"/><text x="0.2500%" y="223.50">top1_</text></g><g><title>data_transfer_init (219 samples, 10.86%)</title><rect x="39.3158%" y="197" width="10.8577%" height="15" fill="rgb(235,213,38)" fg:x="793" fg:w="219"/><text x="39.5658%" y="207.50">data_transfer_in..</text></g><g><title>get_gfc_unit (75 samples, 3.72%)</title><rect x="46.4551%" y="181" width="3.7184%" height="15" fill="rgb(237,122,38)" fg:x="937" fg:w="75"/><text x="46.7051%" y="191.50">get_..</text></g><g><title>___pthread_mutex_lock (10 samples, 0.50%)</title><rect x="49.6777%" y="165" width="0.4958%" height="15" fill="rgb(244,218,35)" fg:x="1002" fg:w="10"/><text x="49.9277%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (4 samples, 0.20%)</title><rect x="50.8180%" y="197" width="0.1983%" height="15" fill="rgb(240,68,47)" fg:x="1025" fg:w="4"/><text x="51.0680%" y="207.50"></text></g><g><title>_gfortran_st_write (2 samples, 0.10%)</title><rect x="51.0164%" y="197" width="0.0992%" height="15" fill="rgb(210,16,53)" fg:x="1029" fg:w="2"/><text x="51.2664%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="51.0659%" y="181" width="0.0496%" height="15" fill="rgb(235,124,12)" fg:x="1030" fg:w="1"/><text x="51.3159%" y="191.50"></text></g><g><title>_gfortran_st_write_done (2 samples, 0.10%)</title><rect x="51.1155%" y="197" width="0.0992%" height="15" fill="rgb(224,169,11)" fg:x="1031" fg:w="2"/><text x="51.3655%" y="207.50"></text></g><g><title>_gfortran_transfer_character (6 samples, 0.30%)</title><rect x="51.2147%" y="197" width="0.2975%" height="15" fill="rgb(250,166,2)" fg:x="1033" fg:w="6"/><text x="51.4647%" y="207.50"></text></g><g><title>_gfortran_transfer_integer (2 samples, 0.10%)</title><rect x="51.5121%" y="197" width="0.0992%" height="15" fill="rgb(242,216,29)" fg:x="1039" fg:w="2"/><text x="51.7621%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (9 samples, 0.45%)</title><rect x="54.5860%" y="165" width="0.4462%" height="15" fill="rgb(230,116,27)" fg:x="1101" fg:w="9"/><text x="54.8360%" y="175.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5 samples, 0.25%)</title><rect x="55.0322%" y="165" width="0.2479%" height="15" fill="rgb(228,99,48)" fg:x="1110" fg:w="5"/><text x="55.2822%" y="175.50"></text></g><g><title>_gfortrani_fbuf_flush_list (3 samples, 0.15%)</title><rect x="55.2801%" y="165" width="0.1487%" height="15" fill="rgb(253,11,6)" fg:x="1115" fg:w="3"/><text x="55.5301%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="57.1641%" y="149" width="0.0992%" height="15" fill="rgb(247,143,39)" fg:x="1153" fg:w="2"/><text x="57.4141%" y="159.50"></text></g><g><title>_gfortrani_write_block (57 samples, 2.83%)</title><rect x="55.4289%" y="165" width="2.8260%" height="15" fill="rgb(236,97,10)" fg:x="1118" fg:w="57"/><text x="55.6789%" y="175.50">_g..</text></g><g><title>_gfortrani_fbuf_alloc (20 samples, 0.99%)</title><rect x="57.2633%" y="149" width="0.9916%" height="15" fill="rgb(233,208,19)" fg:x="1155" fg:w="20"/><text x="57.5133%" y="159.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="58.6515%" y="149" width="0.0496%" height="15" fill="rgb(216,164,2)" fg:x="1183" fg:w="1"/><text x="58.9015%" y="159.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="59.4943%" y="133" width="0.0992%" height="15" fill="rgb(220,129,5)" fg:x="1200" fg:w="2"/><text x="59.7443%" y="143.50"></text></g><g><title>write_character (38 samples, 1.88%)</title><rect x="58.2548%" y="165" width="1.8840%" height="15" fill="rgb(242,17,10)" fg:x="1175" fg:w="38"/><text x="58.5048%" y="175.50">w..</text></g><g><title>_gfortrani_write_block (29 samples, 1.44%)</title><rect x="58.7010%" y="149" width="1.4378%" height="15" fill="rgb(242,107,0)" fg:x="1184" fg:w="29"/><text x="58.9510%" y="159.50"></text></g><g><title>_gfortrani_fbuf_alloc (11 samples, 0.55%)</title><rect x="59.5935%" y="133" width="0.5454%" height="15" fill="rgb(251,28,31)" fg:x="1202" fg:w="11"/><text x="59.8435%" y="143.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="61.6758%" y="149" width="0.0992%" height="15" fill="rgb(233,223,10)" fg:x="1244" fg:w="2"/><text x="61.9258%" y="159.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.10%)</title><rect x="61.7749%" y="149" width="0.0992%" height="15" fill="rgb(215,21,27)" fg:x="1246" fg:w="2"/><text x="62.0249%" y="159.50"></text></g><g><title>__memset_evex_unaligned_erms (8 samples, 0.40%)</title><rect x="61.8741%" y="149" width="0.3966%" height="15" fill="rgb(232,23,21)" fg:x="1248" fg:w="8"/><text x="62.1241%" y="159.50"></text></g><g><title>__strlen_evex (19 samples, 0.94%)</title><rect x="62.2707%" y="149" width="0.9420%" height="15" fill="rgb(244,5,23)" fg:x="1256" fg:w="19"/><text x="62.5207%" y="159.50"></text></g><g><title>_gfortrani_gfc_itoa (54 samples, 2.68%)</title><rect x="63.2127%" y="149" width="2.6772%" height="15" fill="rgb(226,81,46)" fg:x="1275" fg:w="54"/><text x="63.4627%" y="159.50">_g..</text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="66.3857%" y="133" width="0.0992%" height="15" fill="rgb(247,70,30)" fg:x="1339" fg:w="2"/><text x="66.6357%" y="143.50"></text></g><g><title>_gfortrani_write_block (15 samples, 0.74%)</title><rect x="65.8899%" y="149" width="0.7437%" height="15" fill="rgb(212,68,19)" fg:x="1329" fg:w="15"/><text x="66.1399%" y="159.50"></text></g><g><title>_gfortrani_fbuf_alloc (3 samples, 0.15%)</title><rect x="66.4849%" y="133" width="0.1487%" height="15" fill="rgb(240,187,13)" fg:x="1341" fg:w="3"/><text x="66.7349%" y="143.50"></text></g><g><title>_init (2 samples, 0.10%)</title><rect x="66.6336%" y="149" width="0.0992%" height="15" fill="rgb(223,113,26)" fg:x="1344" fg:w="2"/><text x="66.8836%" y="159.50"></text></g><g><title>_gfortrani_list_formatted_write (308 samples, 15.27%)</title><rect x="51.6113%" y="197" width="15.2702%" height="15" fill="rgb(206,192,2)" fg:x="1041" fg:w="308"/><text x="51.8613%" y="207.50">_gfortrani_list_formatt..</text></g><g><title>list_formatted_write_scalar (284 samples, 14.08%)</title><rect x="52.8012%" y="181" width="14.0803%" height="15" fill="rgb(241,108,4)" fg:x="1065" fg:w="284"/><text x="53.0512%" y="191.50">list_formatted_write_..</text></g><g><title>write_decimal.constprop.0 (136 samples, 6.74%)</title><rect x="60.1388%" y="165" width="6.7427%" height="15" fill="rgb(247,173,49)" fg:x="1213" fg:w="136"/><text x="60.3888%" y="175.50">write_dec..</text></g><g><title>extract_int (3 samples, 0.15%)</title><rect x="66.7328%" y="149" width="0.1487%" height="15" fill="rgb(224,114,35)" fg:x="1346" fg:w="3"/><text x="66.9828%" y="159.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (5 samples, 0.25%)</title><rect x="67.2286%" y="181" width="0.2479%" height="15" fill="rgb(245,159,27)" fg:x="1356" fg:w="5"/><text x="67.4786%" y="191.50"></text></g><g><title>___pthread_mutex_unlock (4 samples, 0.20%)</title><rect x="67.4765%" y="181" width="0.1983%" height="15" fill="rgb(245,172,44)" fg:x="1361" fg:w="4"/><text x="67.7265%" y="191.50"></text></g><g><title>_gfortrani_free_ionml (4 samples, 0.20%)</title><rect x="67.6748%" y="181" width="0.1983%" height="15" fill="rgb(236,23,11)" fg:x="1365" fg:w="4"/><text x="67.9248%" y="191.50"></text></g><g><title>_init (2 samples, 0.10%)</title><rect x="67.8731%" y="181" width="0.0992%" height="15" fill="rgb(205,117,38)" fg:x="1369" fg:w="2"/><text x="68.1231%" y="191.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (4 samples, 0.20%)</title><rect x="69.3109%" y="165" width="0.1983%" height="15" fill="rgb(237,72,25)" fg:x="1398" fg:w="4"/><text x="69.5609%" y="175.50"></text></g><g><title>__GI___uselocale (4 samples, 0.20%)</title><rect x="69.5092%" y="165" width="0.1983%" height="15" fill="rgb(244,70,9)" fg:x="1402" fg:w="4"/><text x="69.7592%" y="175.50"></text></g><g><title>_gfortrani_fbuf_seek (8 samples, 0.40%)</title><rect x="69.7075%" y="165" width="0.3966%" height="15" fill="rgb(217,125,39)" fg:x="1406" fg:w="8"/><text x="69.9575%" y="175.50"></text></g><g><title>_gfortrani_fbuf_alloc (10 samples, 0.50%)</title><rect x="71.0461%" y="149" width="0.4958%" height="15" fill="rgb(235,36,10)" fg:x="1433" fg:w="10"/><text x="71.2961%" y="159.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (3 samples, 0.15%)</title><rect x="72.1368%" y="133" width="0.1487%" height="15" fill="rgb(251,123,47)" fg:x="1455" fg:w="3"/><text x="72.3868%" y="143.50"></text></g><g><title>kernel: __x86_indirect_thunk_rax (1 samples, 0.05%)</title><rect x="76.5493%" y="101" width="0.0496%" height="15" fill="rgb(221,13,13)" fg:x="1544" fg:w="1"/><text x="76.7993%" y="111.50"></text></g><g><title>kernel: __x86_return_thunk (3 samples, 0.15%)</title><rect x="76.5989%" y="101" width="0.1487%" height="15" fill="rgb(238,131,9)" fg:x="1545" fg:w="3"/><text x="76.8489%" y="111.50"></text></g><g><title>kernel: __audit_syscall_entry (14 samples, 0.69%)</title><rect x="81.8542%" y="53" width="0.6941%" height="15" fill="rgb(211,50,8)" fg:x="1651" fg:w="14"/><text x="82.1042%" y="63.50"></text></g><g><title>kernel: __audit_syscall_exit (8 samples, 0.40%)</title><rect x="82.5483%" y="53" width="0.3966%" height="15" fill="rgb(245,182,24)" fg:x="1665" fg:w="8"/><text x="82.7983%" y="63.50"></text></g><g><title>kernel: __tdx_hypercall (43 samples, 2.13%)</title><rect x="80.9618%" y="69" width="2.1319%" height="15" fill="rgb(242,14,37)" fg:x="1633" fg:w="43"/><text x="81.2118%" y="79.50">k..</text></g><g><title>kernel: ktime_get_coarse_real_ts64 (3 samples, 0.15%)</title><rect x="82.9450%" y="53" width="0.1487%" height="15" fill="rgb(246,228,12)" fg:x="1673" fg:w="3"/><text x="83.1950%" y="63.50"></text></g><g><title>kernel: __x64_sys_write (2 samples, 0.10%)</title><rect x="83.0937%" y="69" width="0.0992%" height="15" fill="rgb(213,55,15)" fg:x="1676" fg:w="2"/><text x="83.3437%" y="79.50"></text></g><g><title>kernel: __fdget_pos (36 samples, 1.78%)</title><rect x="83.9861%" y="53" width="1.7848%" height="15" fill="rgb(209,9,3)" fg:x="1694" fg:w="36"/><text x="84.2361%" y="63.50">k..</text></g><g><title>kernel: iget_failed (31 samples, 1.54%)</title><rect x="84.2340%" y="37" width="1.5369%" height="15" fill="rgb(230,59,30)" fg:x="1699" fg:w="31"/><text x="84.4840%" y="47.50"></text></g><g><title>kernel: __fsnotify_parent (8 samples, 0.40%)</title><rect x="86.9608%" y="37" width="0.3966%" height="15" fill="rgb(209,121,21)" fg:x="1754" fg:w="8"/><text x="87.2108%" y="47.50"></text></g><g><title>kernel: fsnotify (24 samples, 1.19%)</title><rect x="87.3575%" y="37" width="1.1899%" height="15" fill="rgb(220,109,13)" fg:x="1762" fg:w="24"/><text x="87.6075%" y="47.50"></text></g><g><title>kernel: rw_verify_area (4 samples, 0.20%)</title><rect x="88.5473%" y="37" width="0.1983%" height="15" fill="rgb(232,18,1)" fg:x="1786" fg:w="4"/><text x="88.7973%" y="47.50"></text></g><g><title>__GI___write (336 samples, 16.66%)</title><rect x="72.5830%" y="117" width="16.6584%" height="15" fill="rgb(215,41,42)" fg:x="1464" fg:w="336"/><text x="72.8330%" y="127.50">__GI___write</text></g><g><title>kernel: entry_SYSCALL_64_after_hwframe (252 samples, 12.49%)</title><rect x="76.7476%" y="101" width="12.4938%" height="15" fill="rgb(224,123,36)" fg:x="1548" fg:w="252"/><text x="76.9976%" y="111.50">kernel: entry_SYSCA..</text></g><g><title>kernel: do_syscall_64 (252 samples, 12.49%)</title><rect x="76.7476%" y="85" width="12.4938%" height="15" fill="rgb(240,125,3)" fg:x="1548" fg:w="252"/><text x="76.9976%" y="95.50">kernel: do_syscall_..</text></g><g><title>kernel: ksys_write (122 samples, 6.05%)</title><rect x="83.1929%" y="69" width="6.0486%" height="15" fill="rgb(205,98,50)" fg:x="1678" fg:w="122"/><text x="83.4429%" y="79.50">kernel: ..</text></g><g><title>kernel: vfs_write (70 samples, 3.47%)</title><rect x="85.7709%" y="53" width="3.4705%" height="15" fill="rgb(205,185,37)" fg:x="1730" fg:w="70"/><text x="86.0209%" y="63.50">ker..</text></g><g><title>kernel: security_file_permission (10 samples, 0.50%)</title><rect x="88.7457%" y="37" width="0.4958%" height="15" fill="rgb(238,207,15)" fg:x="1790" fg:w="10"/><text x="88.9957%" y="47.50"></text></g><g><title>_gfortrani_fbuf_flush (358 samples, 17.75%)</title><rect x="71.5419%" y="149" width="17.7491%" height="15" fill="rgb(213,199,42)" fg:x="1443" fg:w="358"/><text x="71.7919%" y="159.50">_gfortrani_fbuf_flush</text></g><g><title>raw_write (343 samples, 17.01%)</title><rect x="72.2856%" y="133" width="17.0055%" height="15" fill="rgb(235,201,11)" fg:x="1458" fg:w="343"/><text x="72.5356%" y="143.50">raw_write</text></g><g><title>_init (1 samples, 0.05%)</title><rect x="89.2414%" y="117" width="0.0496%" height="15" fill="rgb(207,46,11)" fg:x="1800" fg:w="1"/><text x="89.4914%" y="127.50"></text></g><g><title>_gfortrani_st_write_done_worker (454 samples, 22.51%)</title><rect x="66.8815%" y="197" width="22.5087%" height="15" fill="rgb(241,35,35)" fg:x="1349" fg:w="454"/><text x="67.1315%" y="207.50">_gfortrani_st_write_done_worker</text></g><g><title>finalize_transfer (432 samples, 21.42%)</title><rect x="67.9722%" y="181" width="21.4179%" height="15" fill="rgb(243,32,47)" fg:x="1371" fg:w="432"/><text x="68.2222%" y="191.50">finalize_transfer</text></g><g><title>_gfortrani_next_record (389 samples, 19.29%)</title><rect x="70.1041%" y="165" width="19.2861%" height="15" fill="rgb(247,202,23)" fg:x="1414" fg:w="389"/><text x="70.3541%" y="175.50">_gfortrani_next_record</text></g><g><title>_gfortrani_fbuf_seek (2 samples, 0.10%)</title><rect x="89.2910%" y="149" width="0.0992%" height="15" fill="rgb(219,102,11)" fg:x="1801" fg:w="2"/><text x="89.5410%" y="159.50"></text></g><g><title>_init (5 samples, 0.25%)</title><rect x="89.3902%" y="197" width="0.2479%" height="15" fill="rgb(243,110,44)" fg:x="1803" fg:w="5"/><text x="89.6402%" y="207.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="92.5632%" y="181" width="0.0496%" height="15" fill="rgb(222,74,54)" fg:x="1867" fg:w="1"/><text x="92.8132%" y="191.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="93.6044%" y="165" width="0.0496%" height="15" fill="rgb(216,99,12)" fg:x="1888" fg:w="1"/><text x="93.8544%" y="175.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (1 samples, 0.05%)</title><rect x="94.7942%" y="149" width="0.0496%" height="15" fill="rgb(226,22,26)" fg:x="1912" fg:w="1"/><text x="95.0442%" y="159.50"></text></g><g><title>__GI__IO_fflush (29 samples, 1.44%)</title><rect x="93.6539%" y="165" width="1.4378%" height="15" fill="rgb(217,163,10)" fg:x="1889" fg:w="29"/><text x="93.9039%" y="175.50"></text></g><g><title>__GI__IO_file_sync (5 samples, 0.25%)</title><rect x="94.8438%" y="149" width="0.2479%" height="15" fill="rgb(213,25,53)" fg:x="1913" fg:w="5"/><text x="95.0938%" y="159.50"></text></g><g><title>__GI___uselocale (16 samples, 0.79%)</title><rect x="95.0917%" y="165" width="0.7933%" height="15" fill="rgb(252,105,26)" fg:x="1918" fg:w="16"/><text x="95.3417%" y="175.50"></text></g><g><title>_gfortrani_flush_if_preconnected (6 samples, 0.30%)</title><rect x="95.8850%" y="165" width="0.2975%" height="15" fill="rgb(220,39,43)" fg:x="1934" fg:w="6"/><text x="96.1350%" y="175.50"></text></g><g><title>_init (2 samples, 0.10%)</title><rect x="96.1824%" y="165" width="0.0992%" height="15" fill="rgb(229,68,48)" fg:x="1940" fg:w="2"/><text x="96.4324%" y="175.50"></text></g><g><title>_gfortrani_data_transfer_init_worker (79 samples, 3.92%)</title><rect x="92.6128%" y="181" width="3.9167%" height="15" fill="rgb(252,8,32)" fg:x="1868" fg:w="79"/><text x="92.8628%" y="191.50">_gfo..</text></g><g><title>pre_position (5 samples, 0.25%)</title><rect x="96.2816%" y="165" width="0.2479%" height="15" fill="rgb(223,20,43)" fg:x="1942" fg:w="5"/><text x="96.5316%" y="175.50"></text></g><g><title>_gfortrani_get_unit (1 samples, 0.05%)</title><rect x="96.5295%" y="181" width="0.0496%" height="15" fill="rgb(229,81,49)" fg:x="1947" fg:w="1"/><text x="96.7795%" y="191.50"></text></g><g><title>&lt;unknown address not found in symbolization source&gt; (2 samples, 0.10%)</title><rect x="97.4219%" y="165" width="0.0992%" height="15" fill="rgb(236,28,36)" fg:x="1965" fg:w="2"/><text x="97.6719%" y="175.50"></text></g><g><title>__GI___pthread_mutex_trylock (25 samples, 1.24%)</title><rect x="97.5211%" y="165" width="1.2395%" height="15" fill="rgb(249,185,26)" fg:x="1967" fg:w="25"/><text x="97.7711%" y="175.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (3 samples, 0.15%)</title><rect x="98.7605%" y="165" width="0.1487%" height="15" fill="rgb(249,174,33)" fg:x="1992" fg:w="3"/><text x="99.0105%" y="175.50"></text></g><g><title>___pthread_mutex_lock (21 samples, 1.04%)</title><rect x="98.9093%" y="165" width="1.0412%" height="15" fill="rgb(233,201,37)" fg:x="1995" fg:w="21"/><text x="99.1593%" y="175.50"></text></g><g><title>all (2,017 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="367.50"></text></g><g><title>&quot;basic_f77_stack&quot; (2,017 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="351.50">&quot;basic_f77_stack&quot;</text></g><g><title>__libc_start_main_alias_2 (2,017 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="335.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (2,017 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="319.50">__libc_start_call_main</text></g><g><title>main (2,017 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="303.50">main</text></g><g><title>test1 (2,017 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="2017"/><text x="0.2500%" y="287.50">test1</text></g><g><title>a2_ (1,005 samples, 49.83%)</title><rect x="50.1735%" y="261" width="49.8265%" height="15" fill="rgb(238,154,13)" fg:x="1012" fg:w="1005"/><text x="50.4235%" y="271.50">a2_</text></g><g><title>b2_ (1,005 samples, 49.83%)</title><rect x="50.1735%" y="245" width="49.8265%" height="15" fill="rgb(219,56,2)" fg:x="1012" fg:w="1005"/><text x="50.4235%" y="255.50">b2_</text></g><g><title>c2_ (1,005 samples, 49.83%)</title><rect x="50.1735%" y="229" width="49.8265%" height="15" fill="rgb(233,0,4)" fg:x="1012" fg:w="1005"/><text x="50.4235%" y="239.50">c2_</text></g><g><title>top2_ (1,005 samples, 49.83%)</title><rect x="50.1735%" y="213" width="49.8265%" height="15" fill="rgb(235,30,7)" fg:x="1012" fg:w="1005"/><text x="50.4235%" y="223.50">top2_</text></g><g><title>data_transfer_init (209 samples, 10.36%)</title><rect x="89.6381%" y="197" width="10.3619%" height="15" fill="rgb(250,79,13)" fg:x="1808" fg:w="209"/><text x="89.8881%" y="207.50">data_transfer_i..</text></g><g><title>get_gfc_unit (69 samples, 3.42%)</title><rect x="96.5791%" y="181" width="3.4209%" height="15" fill="rgb(211,146,34)" fg:x="1948" fg:w="69"/><text x="96.8291%" y="191.50">get..</text></g><g><title>_init (1 samples, 0.05%)</title><rect x="99.9504%" y="165" width="0.0496%" height="15" fill="rgb(228,22,38)" fg:x="2016" fg:w="1"/><text x="100.2004%" y="175.50"></text></g></svg></svg>